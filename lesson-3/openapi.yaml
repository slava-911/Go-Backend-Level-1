openapi: 3.0.3
info:
  title: Shop
  version: 1.0.0
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        password:
          type: string
    Item:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        price:
#         чтобы не потерять точность, денежные поля мы будем передавать в виде целочисленного
#         значения минимальной размерности валюты (например, центы или копейки)
          type: integer
          format: int64
        image_link:
          type: string
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        customer:
          $ref: '#/components/schemas/User'
        created_at:
          type: string
          format: date-time
        cost:
          type: integer
          format: int64
        status:
          type: string
        set:
          type: array
          items:
            type: object
            properties:
              item:
                $ref: '#/components/schemas/Item'
              quantity:
                type: integer
                format: int64
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
paths:
  /user/login:
    post:
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    post:
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        '200':
          description: successful logout
          content: {}
  /item:
    post:
      summary: Add a new item to the store
      operationId: CreateItem
      requestBody:
        description: Item object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
        required: true
      responses:
        '405':
          description: Invalid input
      security:
        - api_key: [ ]
    get:
      summary: Lists Items with filters
      operationId: ListItems
      parameters:
        - name: price_min
          in: query
          description: Lower price limit
          required: false
          schema:
            type: integer
            format: int64
        - name: price_max
          in: query
          description: Upper price limit
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        '400':
          description: Invalid price range
          content: { }
  /item/upload_image:
    post:
      summary: uploads an image
      operationId: uploadFile
      requestBody:
        description: Additional data to pass to server
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                additionalMetadata:
                  type: string
                file:
                  type: string
                  format: binary
              required:
                - additionalMetadata
                - file
      responses:
        '201':
          description: successful operation
      security:
        - api_key: [ ]
  /item/{itemId}:
    get:
      summary: Find item by ID
      operationId: GetItem
      parameters:
        - name: itemId
          in: path
          description: ID of item to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '400':
          description: Invalid ID supplied
          content: { }
    put:
      summary: Updates an item in the store with form data
      operationId: UpdateItem
      parameters:
        - name: itemId
          in: path
          description: ID of item that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  description: Updated name of the item
                status:
                  type: string
                  description: Updated status of the item
      responses:
        '405':
          description: Invalid input
          content: { }
      security:
        - api_key: [ ]
    delete:
      summary: Deletes a item
      operationId: DeleteItem
      parameters:
        - name: itemId
          in: path
          description: Item id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
          content: { }
        '404':
          description: Item not found
          content: { }
      security:
        - api_key: [ ]
  /order:
    post:
      summary: Place an order
      description: Place a new order in the store
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '405':
          description: Invalid input
    get:
      summary: List of orders
      description: List of orders sorted by date
      operationId: getListOfOrders
      parameters:
        - name: sortAsc
          in: query
          description: sorting direction
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: Invalid sorting direction
          content: { }
      security:
        - api_key: [ ]
  /order/{orderId}:
    get:
      summary: Find purchase order by ID
      description: ''
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
      security:
        - api_key: [ ]
    put:
      summary: Edit order by ID
      description: ''
      operationId: editOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to edit order
          required: true
          schema:
            type: integer
            format: int64
      responses:
        default:
          description: successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
      security:
        - api_key: [ ]
